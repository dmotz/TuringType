// Generated by CoffeeScript 1.10.0
(function() {
  var TuringType, floor, rand,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  rand = Math.random;

  floor = Math.floor;

  TuringType = (function() {
    TuringType.prototype.int = 100;

    TuringType.prototype.accuracy = .95;

    TuringType.prototype.keys = 'qwertyuiopasdfghjklzxcvbnm,./;-=[]'.split('');

    function TuringType(el, text, options) {
      var accuracy, interval, ref, tag;
      this.el = el;
      this.text = text;
      this.options = options != null ? options : {};
      this.clear = bind(this.clear, this);
      this.type = bind(this.type, this);
      if (!(this instanceof TuringType)) {
        return new TuringType(this.el, this.text, this.options);
      }
      if (typeof this.el === 'string') {
        this.el = document.querySelector(this.el);
      }
      this.len = this.text.length;
      this.i = 0;
      ref = this.options, accuracy = ref.accuracy, interval = ref.interval, this.callback = ref.callback;
      this.accuracy = accuracy != null ? accuracy : this.accuracy;
      this.int = interval != null ? interval : this.int;
      if (tag = this.el.tagName.toLowerCase() === 'textarea' || tag === 'input') {
        this.attr = 'value';
        this.el.focus();
      } else {
        this.attr = 'innerText';
      }
      this.type();
    }

    TuringType.prototype.type = function() {
      if (this.i === this.len + 1) {
        return typeof this.callback === "function" ? this.callback() : void 0;
      }
      if (rand() > this.accuracy) {
        this.el[this.attr] = this.text.slice(0, this.i) + this.keys[floor(rand() * this.keys.length)];
        return this.timer = setTimeout((function(_this) {
          return function() {
            _this.el[_this.attr] = _this.text.slice(0, _this.i);
            return _this.timer = setTimeout(_this.type, rand() * _this.int + _this.int * .8);
          };
        })(this), this.int * 1.5);
      } else {
        this.el[this.attr] = this.text.slice(0, this.i++);
        return this.timer = setTimeout(this.type, (function(_this) {
          return function() {
            var t;
            t = rand() * _this.int + _this.int * .1;
            if (_this.text[_this.i] === ' ') {
              t += rand() * _this.int;
            }
            if (_this.text[_this.i] === '.' || _this.text[_this.i] === ',') {
              t += rand() * _this.int * 3;
            }
            if (rand() > .97) {
              t += _this.int * 2;
            }
            if (rand() > .95) {
              t += _this.int;
            }
            return t;
          };
        })(this)());
      }
    };

    TuringType.prototype.pause = function() {
      clearTimeout(this.timer);
      return this.el[this.attr];
    };

    TuringType.prototype.clear = function(n) {
      if (n == null) {
        n = this.len;
      }
      if (n === -2) {
        return;
      }
      this.el[this.attr] = this.text.slice(0, this.i--);
      return setTimeout(this.clear.bind(this, --n), rand() * this.int);
    };

    return TuringType;

  })();

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    module.exports = TuringType;
  } else if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
    define(function() {
      return TuringType;
    });
  } else {
    window.TuringType = TuringType;
  }

}).call(this);
